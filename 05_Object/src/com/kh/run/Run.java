package com.kh.run;

import com.kh.chap01_abstraction.model.vo.Student;

public class Run {



		/*
		 * 1. 객체지향언어 : "객체"를 "지향"하는 언어로 객체중심으로 돌아가는 언어.
		 * 
		 * 2. 객체란 ? 사전적 의미로는 현실세계에 독립적으로 존재하는 모든 것.
		 * 
		 * 3. 객체지향 프로그래밍 : 현실세계의 객체간의 상호작용을 프로그래밍을 통해가상세계로 구현하는 과정
		 * 
		 * 4. 구현하고자 하는 프로그램상의 필요한 객체를 만들기 위해서는 클래스라는 틀을 먼저 만들어야 함.
		 * 	=> 클래스란 ? 각 객체들의 속성(구성요성)들을 담아낼 수 있는 그릇과도 같은 존재
		 *  => 추상화와 캡슐화 과정을 거쳐 클래스를 만들 수 있음.
		 * 
		 * 5. 추상화 과정
		 *  	1) 내가 구현하고자 하는 프로그램에서 필요한 객체들을 생각해 볼 것. ex)학생관리프로그램->'학생','선생님' ..
		 *  	2) 그 객체들이 가지고 있는 공통적인 속성, 기능들을 모두 추출 할 것. ex) 이름,나이,성별,주소, 키 ...
		 *  	3) 추려진 속성들을 가지고 내가 구현한 프로그램의 "실질적인 목적"에 맞춰 불필요한 속성과 기능은 제거하기
		 *  	4) 최종적으로 추려진 속성 및 기능을 가지고 어떤 자료형에 어떤 이름으로 사용할 것인지 생각해보기
		 *  
		 *  6. 위 추상화 과정을 거친 후 선정된 속성을 가지고 프로그래밍을 하게 된다면?
		 *  	1) "변수"만을 가지고 프로그래밍을 하게 된다면?
		 *  		변수 : 하나의 자료형으로 하나의 값만 보관할 수 있다
		 *  	ex)'홍길동' 학생객체를 만들기 위해서는 String name ="홍길동", int age =20; double height = 166.6;
		 *  	ex)'민경민' 학생객체를 또 만들려면  	String name1 ="민경민", int age1 =20; double height1 = 176.6;
		 *  	
		 *   =>관리하고자 하는 학생들이 늘어날수록 생성해야할 변수의 갯수도 그만큼 증가하게 된다 (== 관리가 어렵다)
		 *   
		 *   	2) "배열"을 이용해서 프로그래밍을 하게 된다면?
		 *   		배열 : "같은 자료형"의 데이터를 모아놓는 자료구조
		 *   		학생들의 이름만 저장하는 배열 => String[] name = {"홍길동", "민경민"};
		 *   		학생들의 나이만 저장하는 배열 => int[] age = {1,2};
		 *   
		 *   =>변수를 사용하는 것보다는 나아보임
		 *   =>하지만 관리하는 학생 중 한명이 전학을 간다는 가정하에 해당 학생이 존재하는 모든 인덱스에 있는 정보들을 제거
		 *    해줘야 하고, 또 새로운 학생이 들어오게 될 경우 배열의 특성상 크기변경이 불가능하기 때문에 새로운 배열을 만들어줘야 하고,
		 *    또 새로운 관리해야할 속성정보가 추가되는 경우 순서에 맞는 데이터 추가가 어렵다 (== 유지보수가 힘들다)
		 *    
		 *   	3) 클래스를 가지고 프로그래밍을 하게 된다면?
		 *   		클래스 : 한번에 여러개의 자료형을 보관할 수 있는 배열과 같은 형태
		 *   		String값도 보관하고, int값도 보관, double값 등 여러개의 자료형의 값을 보관할 수 있다.
		 *   		각 객체들의 속성정보들을 담아내는 그릇과도 같은 존재. 보통 vo패키지 내부에 보관한다
		 *   
		 *   public class Strudent {
		 *   	String name = "홍길동";
		 *   	int age = 30;
		 *   	double height = 150.3;
		 *   }
		 *   
		 *  7. package com.kh.chap02_encapulation.Run; 
		 *   
		 * */
		
	public static void main(String[] args) {	
		
		// Student 클래스 생성해보기
		// 1. Student 클래스 생성 후 객체 생성
		// 홍길동 객체 만들기
		
		Student hong = new Student();	// 객체생성 완료
		hong.name = "홍길동";
		hong.age = 30;
		hong.height = 150.3;
		
		Student song = new Student();	// 객체생성 완료
		song.name = "송다연";
		song.age = 20;
		song.height = 170.5;
		
		
		
		System.out.println(hong);
		System.out.println(song);
		
		
		//xxx님의 나이는 xx살이고, 키는 xx.xcm입니다.
		
		//System.out.printf("%s님의 나이는 %d살이고, 키는 %.1f입니다. ", hong.name, hong.age, hong.height);
		
		/*
		 * Student클래스에 필드 제한자를 public으로 설정시
		 * 	=> 직접적으로 생성된 객체 내부의 필드에 접근이 가능
		 *  => 데이터가 중간에 변경될 여지가 있고, 보안상 문제가 생길 수 있다.
		 * 	=> 조회권한이 없는 사용자가 값을 쉽게 변경, 조회가 가능하기 때문.
		 * 
		 * 위 문제를 캡슐화를 통해 해결 가능함
		 * 캡슐화 객체지향 설계원칙중 하나.
		 * 
		 * */
		
		
		
		
		
		
		
		
	}

}
